/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface PollInterface extends utils.Interface {
  functions: {
    "endBlock()": FunctionFragment;
    "vote(uint256)": FunctionFragment;
    "destroy()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "endBlock" | "vote" | "destroy"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "endBlock", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "vote",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "destroy", values?: undefined): string;

  decodeFunctionResult(functionFragment: "endBlock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "destroy", data: BytesLike): Result;

  events: {
    "Vote(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Vote"): EventFragment;
}

export interface VoteEventObject {
  voter: string;
  choiceID: BigNumber;
}
export type VoteEvent = TypedEvent<[string, BigNumber], VoteEventObject>;

export type VoteEventFilter = TypedEventFilter<VoteEvent>;

export interface Poll extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PollInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    endBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    vote(
      _choiceID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    destroy(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  endBlock(overrides?: CallOverrides): Promise<BigNumber>;

  vote(
    _choiceID: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  destroy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    endBlock(overrides?: CallOverrides): Promise<BigNumber>;

    vote(
      _choiceID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    destroy(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Vote(address,uint256)"(
      voter?: PromiseOrValue<string> | null,
      choiceID?: null
    ): VoteEventFilter;
    Vote(
      voter?: PromiseOrValue<string> | null,
      choiceID?: null
    ): VoteEventFilter;
  };

  estimateGas: {
    endBlock(overrides?: CallOverrides): Promise<BigNumber>;

    vote(
      _choiceID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    destroy(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    endBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vote(
      _choiceID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    destroy(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
