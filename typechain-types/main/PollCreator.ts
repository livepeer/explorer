/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface PollCreatorInterface extends utils.Interface {
  functions: {
    "QUORUM()": FunctionFragment;
    "createPoll(bytes)": FunctionFragment;
    "POLL_CREATION_COST()": FunctionFragment;
    "QUOTA()": FunctionFragment;
    "POLL_PERIOD()": FunctionFragment;
    "token()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "QUORUM"
      | "createPoll"
      | "POLL_CREATION_COST"
      | "QUOTA"
      | "POLL_PERIOD"
      | "token"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "QUORUM", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "createPoll",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "POLL_CREATION_COST",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "QUOTA", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "POLL_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;

  decodeFunctionResult(functionFragment: "QUORUM", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createPoll", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "POLL_CREATION_COST",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "QUOTA", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "POLL_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;

  events: {
    "PollCreated(address,bytes,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "PollCreated"): EventFragment;
}

export interface PollCreatedEventObject {
  poll: string;
  proposal: string;
  endBlock: BigNumber;
  quorum: BigNumber;
  quota: BigNumber;
}
export type PollCreatedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber],
  PollCreatedEventObject
>;

export type PollCreatedEventFilter = TypedEventFilter<PollCreatedEvent>;

export interface PollCreator extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PollCreatorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    QUORUM(overrides?: CallOverrides): Promise<[BigNumber]>;

    createPoll(
      _proposal: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    POLL_CREATION_COST(overrides?: CallOverrides): Promise<[BigNumber]>;

    QUOTA(overrides?: CallOverrides): Promise<[BigNumber]>;

    POLL_PERIOD(overrides?: CallOverrides): Promise<[BigNumber]>;

    token(overrides?: CallOverrides): Promise<[string]>;
  };

  QUORUM(overrides?: CallOverrides): Promise<BigNumber>;

  createPoll(
    _proposal: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  POLL_CREATION_COST(overrides?: CallOverrides): Promise<BigNumber>;

  QUOTA(overrides?: CallOverrides): Promise<BigNumber>;

  POLL_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

  token(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    QUORUM(overrides?: CallOverrides): Promise<BigNumber>;

    createPoll(
      _proposal: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    POLL_CREATION_COST(overrides?: CallOverrides): Promise<BigNumber>;

    QUOTA(overrides?: CallOverrides): Promise<BigNumber>;

    POLL_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "PollCreated(address,bytes,uint256,uint256,uint256)"(
      poll?: PromiseOrValue<string> | null,
      proposal?: null,
      endBlock?: null,
      quorum?: null,
      quota?: null
    ): PollCreatedEventFilter;
    PollCreated(
      poll?: PromiseOrValue<string> | null,
      proposal?: null,
      endBlock?: null,
      quorum?: null,
      quota?: null
    ): PollCreatedEventFilter;
  };

  estimateGas: {
    QUORUM(overrides?: CallOverrides): Promise<BigNumber>;

    createPoll(
      _proposal: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    POLL_CREATION_COST(overrides?: CallOverrides): Promise<BigNumber>;

    QUOTA(overrides?: CallOverrides): Promise<BigNumber>;

    POLL_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    QUORUM(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createPoll(
      _proposal: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    POLL_CREATION_COST(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    QUOTA(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    POLL_PERIOD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
