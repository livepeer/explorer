/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface ServiceRegistryInterface extends utils.Interface {
  functions: {
    "getServiceURI(address)": FunctionFragment;
    "targetContractId()": FunctionFragment;
    "setServiceURI(string)": FunctionFragment;
    "setController(address)": FunctionFragment;
    "controller()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getServiceURI"
      | "targetContractId"
      | "setServiceURI"
      | "setController"
      | "controller"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getServiceURI",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "targetContractId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setServiceURI",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setController",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "controller",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "getServiceURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "targetContractId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setServiceURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "controller", data: BytesLike): Result;

  events: {
    "ServiceURIUpdate(address,string)": EventFragment;
    "SetController(address)": EventFragment;
    "ParameterUpdate(string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ServiceURIUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetController"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ParameterUpdate"): EventFragment;
}

export interface ServiceURIUpdateEventObject {
  addr: string;
  serviceURI: string;
}
export type ServiceURIUpdateEvent = TypedEvent<
  [string, string],
  ServiceURIUpdateEventObject
>;

export type ServiceURIUpdateEventFilter =
  TypedEventFilter<ServiceURIUpdateEvent>;

export interface SetControllerEventObject {
  controller: string;
}
export type SetControllerEvent = TypedEvent<[string], SetControllerEventObject>;

export type SetControllerEventFilter = TypedEventFilter<SetControllerEvent>;

export interface ParameterUpdateEventObject {
  param: string;
}
export type ParameterUpdateEvent = TypedEvent<
  [string],
  ParameterUpdateEventObject
>;

export type ParameterUpdateEventFilter = TypedEventFilter<ParameterUpdateEvent>;

export interface ServiceRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ServiceRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getServiceURI(
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    targetContractId(overrides?: CallOverrides): Promise<[string]>;

    setServiceURI(
      _serviceURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setController(
      _controller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    controller(overrides?: CallOverrides): Promise<[string]>;
  };

  getServiceURI(
    _addr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  targetContractId(overrides?: CallOverrides): Promise<string>;

  setServiceURI(
    _serviceURI: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setController(
    _controller: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  controller(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    getServiceURI(
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    targetContractId(overrides?: CallOverrides): Promise<string>;

    setServiceURI(
      _serviceURI: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setController(
      _controller: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    controller(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "ServiceURIUpdate(address,string)"(
      addr?: PromiseOrValue<string> | null,
      serviceURI?: null
    ): ServiceURIUpdateEventFilter;
    ServiceURIUpdate(
      addr?: PromiseOrValue<string> | null,
      serviceURI?: null
    ): ServiceURIUpdateEventFilter;

    "SetController(address)"(controller?: null): SetControllerEventFilter;
    SetController(controller?: null): SetControllerEventFilter;

    "ParameterUpdate(string)"(param?: null): ParameterUpdateEventFilter;
    ParameterUpdate(param?: null): ParameterUpdateEventFilter;
  };

  estimateGas: {
    getServiceURI(
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    targetContractId(overrides?: CallOverrides): Promise<BigNumber>;

    setServiceURI(
      _serviceURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setController(
      _controller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    controller(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    getServiceURI(
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    targetContractId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setServiceURI(
      _serviceURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setController(
      _controller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    controller(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
