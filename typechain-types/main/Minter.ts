/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface MinterInterface extends utils.Interface {
  functions: {
    "controller()": FunctionFragment;
    "createReward(uint256,uint256)": FunctionFragment;
    "currentMintableTokens()": FunctionFragment;
    "currentMintedTokens()": FunctionFragment;
    "depositETH()": FunctionFragment;
    "getController()": FunctionFragment;
    "getGlobalTotalSupply()": FunctionFragment;
    "inflation()": FunctionFragment;
    "inflationChange()": FunctionFragment;
    "migrateToNewMinter(address)": FunctionFragment;
    "setController(address)": FunctionFragment;
    "setCurrentRewardTokens()": FunctionFragment;
    "setInflationChange(uint256)": FunctionFragment;
    "setTargetBondingRate(uint256)": FunctionFragment;
    "targetBondingRate()": FunctionFragment;
    "trustedBurnTokens(uint256)": FunctionFragment;
    "trustedTransferTokens(address,uint256)": FunctionFragment;
    "trustedWithdrawETH(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "controller"
      | "createReward"
      | "currentMintableTokens"
      | "currentMintedTokens"
      | "depositETH"
      | "getController"
      | "getGlobalTotalSupply"
      | "inflation"
      | "inflationChange"
      | "migrateToNewMinter"
      | "setController"
      | "setCurrentRewardTokens"
      | "setInflationChange"
      | "setTargetBondingRate"
      | "targetBondingRate"
      | "trustedBurnTokens"
      | "trustedTransferTokens"
      | "trustedWithdrawETH"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "controller",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createReward",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "currentMintableTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentMintedTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositETH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getController",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGlobalTotalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "inflation", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "inflationChange",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "migrateToNewMinter",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setController",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setCurrentRewardTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setInflationChange",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTargetBondingRate",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "targetBondingRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "trustedBurnTokens",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "trustedTransferTokens",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "trustedWithdrawETH",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "controller", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentMintableTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentMintedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "depositETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGlobalTotalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "inflation", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "inflationChange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "migrateToNewMinter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCurrentRewardTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInflationChange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTargetBondingRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "targetBondingRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "trustedBurnTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "trustedTransferTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "trustedWithdrawETH",
    data: BytesLike
  ): Result;

  events: {
    "ParameterUpdate(string)": EventFragment;
    "SetController(address)": EventFragment;
    "SetCurrentRewardTokens(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ParameterUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetController"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetCurrentRewardTokens"): EventFragment;
}

export interface ParameterUpdateEventObject {
  param: string;
}
export type ParameterUpdateEvent = TypedEvent<
  [string],
  ParameterUpdateEventObject
>;

export type ParameterUpdateEventFilter = TypedEventFilter<ParameterUpdateEvent>;

export interface SetControllerEventObject {
  controller: string;
}
export type SetControllerEvent = TypedEvent<[string], SetControllerEventObject>;

export type SetControllerEventFilter = TypedEventFilter<SetControllerEvent>;

export interface SetCurrentRewardTokensEventObject {
  currentMintableTokens: BigNumber;
  currentInflation: BigNumber;
}
export type SetCurrentRewardTokensEvent = TypedEvent<
  [BigNumber, BigNumber],
  SetCurrentRewardTokensEventObject
>;

export type SetCurrentRewardTokensEventFilter =
  TypedEventFilter<SetCurrentRewardTokensEvent>;

export interface Minter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MinterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    controller(overrides?: CallOverrides): Promise<[string]>;

    createReward(
      _fracNum: PromiseOrValue<BigNumberish>,
      _fracDenom: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    currentMintableTokens(overrides?: CallOverrides): Promise<[BigNumber]>;

    currentMintedTokens(overrides?: CallOverrides): Promise<[BigNumber]>;

    depositETH(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getController(overrides?: CallOverrides): Promise<[string]>;

    getGlobalTotalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    inflation(overrides?: CallOverrides): Promise<[BigNumber]>;

    inflationChange(overrides?: CallOverrides): Promise<[BigNumber]>;

    migrateToNewMinter(
      _newMinter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setController(
      _controller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setCurrentRewardTokens(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setInflationChange(
      _inflationChange: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTargetBondingRate(
      _targetBondingRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    targetBondingRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    trustedBurnTokens(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    trustedTransferTokens(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    trustedWithdrawETH(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  controller(overrides?: CallOverrides): Promise<string>;

  createReward(
    _fracNum: PromiseOrValue<BigNumberish>,
    _fracDenom: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  currentMintableTokens(overrides?: CallOverrides): Promise<BigNumber>;

  currentMintedTokens(overrides?: CallOverrides): Promise<BigNumber>;

  depositETH(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getController(overrides?: CallOverrides): Promise<string>;

  getGlobalTotalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  inflation(overrides?: CallOverrides): Promise<BigNumber>;

  inflationChange(overrides?: CallOverrides): Promise<BigNumber>;

  migrateToNewMinter(
    _newMinter: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setController(
    _controller: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setCurrentRewardTokens(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setInflationChange(
    _inflationChange: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTargetBondingRate(
    _targetBondingRate: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  targetBondingRate(overrides?: CallOverrides): Promise<BigNumber>;

  trustedBurnTokens(
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  trustedTransferTokens(
    _to: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  trustedWithdrawETH(
    _to: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    controller(overrides?: CallOverrides): Promise<string>;

    createReward(
      _fracNum: PromiseOrValue<BigNumberish>,
      _fracDenom: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentMintableTokens(overrides?: CallOverrides): Promise<BigNumber>;

    currentMintedTokens(overrides?: CallOverrides): Promise<BigNumber>;

    depositETH(overrides?: CallOverrides): Promise<boolean>;

    getController(overrides?: CallOverrides): Promise<string>;

    getGlobalTotalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    inflation(overrides?: CallOverrides): Promise<BigNumber>;

    inflationChange(overrides?: CallOverrides): Promise<BigNumber>;

    migrateToNewMinter(
      _newMinter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setController(
      _controller: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setCurrentRewardTokens(overrides?: CallOverrides): Promise<void>;

    setInflationChange(
      _inflationChange: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTargetBondingRate(
      _targetBondingRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    targetBondingRate(overrides?: CallOverrides): Promise<BigNumber>;

    trustedBurnTokens(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    trustedTransferTokens(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    trustedWithdrawETH(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ParameterUpdate(string)"(param?: null): ParameterUpdateEventFilter;
    ParameterUpdate(param?: null): ParameterUpdateEventFilter;

    "SetController(address)"(controller?: null): SetControllerEventFilter;
    SetController(controller?: null): SetControllerEventFilter;

    "SetCurrentRewardTokens(uint256,uint256)"(
      currentMintableTokens?: null,
      currentInflation?: null
    ): SetCurrentRewardTokensEventFilter;
    SetCurrentRewardTokens(
      currentMintableTokens?: null,
      currentInflation?: null
    ): SetCurrentRewardTokensEventFilter;
  };

  estimateGas: {
    controller(overrides?: CallOverrides): Promise<BigNumber>;

    createReward(
      _fracNum: PromiseOrValue<BigNumberish>,
      _fracDenom: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    currentMintableTokens(overrides?: CallOverrides): Promise<BigNumber>;

    currentMintedTokens(overrides?: CallOverrides): Promise<BigNumber>;

    depositETH(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getController(overrides?: CallOverrides): Promise<BigNumber>;

    getGlobalTotalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    inflation(overrides?: CallOverrides): Promise<BigNumber>;

    inflationChange(overrides?: CallOverrides): Promise<BigNumber>;

    migrateToNewMinter(
      _newMinter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setController(
      _controller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setCurrentRewardTokens(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setInflationChange(
      _inflationChange: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTargetBondingRate(
      _targetBondingRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    targetBondingRate(overrides?: CallOverrides): Promise<BigNumber>;

    trustedBurnTokens(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    trustedTransferTokens(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    trustedWithdrawETH(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    controller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createReward(
      _fracNum: PromiseOrValue<BigNumberish>,
      _fracDenom: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    currentMintableTokens(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentMintedTokens(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    depositETH(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getController(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getGlobalTotalSupply(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    inflation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    inflationChange(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    migrateToNewMinter(
      _newMinter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setController(
      _controller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setCurrentRewardTokens(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setInflationChange(
      _inflationChange: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTargetBondingRate(
      _targetBondingRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    targetBondingRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    trustedBurnTokens(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    trustedTransferTokens(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    trustedWithdrawETH(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
