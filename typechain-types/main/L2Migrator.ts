/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace IMigrator {
  export type MigrateDelegatorParamsStruct = {
    l1Addr: PromiseOrValue<string>;
    l2Addr: PromiseOrValue<string>;
    stake: PromiseOrValue<BigNumberish>;
    delegatedStake: PromiseOrValue<BigNumberish>;
    fees: PromiseOrValue<BigNumberish>;
    delegate: PromiseOrValue<string>;
  };

  export type MigrateDelegatorParamsStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    string
  ] & {
    l1Addr: string;
    l2Addr: string;
    stake: BigNumber;
    delegatedStake: BigNumber;
    fees: BigNumber;
    delegate: string;
  };

  export type MigrateSenderParamsStruct = {
    l1Addr: PromiseOrValue<string>;
    l2Addr: PromiseOrValue<string>;
    deposit: PromiseOrValue<BigNumberish>;
    reserve: PromiseOrValue<BigNumberish>;
  };

  export type MigrateSenderParamsStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber
  ] & {
    l1Addr: string;
    l2Addr: string;
    deposit: BigNumber;
    reserve: BigNumber;
  };

  export type MigrateUnbondingLocksParamsStruct = {
    l1Addr: PromiseOrValue<string>;
    l2Addr: PromiseOrValue<string>;
    total: PromiseOrValue<BigNumberish>;
    unbondingLockIds: PromiseOrValue<BigNumberish>[];
    delegate: PromiseOrValue<string>;
  };

  export type MigrateUnbondingLocksParamsStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber[],
    string
  ] & {
    l1Addr: string;
    l2Addr: string;
    total: BigNumber;
    unbondingLockIds: BigNumber[];
    delegate: string;
  };
}

export interface L2MigratorInterface extends utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "GOVERNOR_ROLE()": FunctionFragment;
    "bondingManagerAddr()": FunctionFragment;
    "claimStake(address,uint256,uint256,bytes32[],address)": FunctionFragment;
    "claimStakeEnabled()": FunctionFragment;
    "claimedDelegatedStake(address)": FunctionFragment;
    "delegatorPoolImpl()": FunctionFragment;
    "delegatorPools(address)": FunctionFragment;
    "finalizeMigrateDelegator((address,address,uint256,uint256,uint256,address))": FunctionFragment;
    "finalizeMigrateSender((address,address,uint256,uint256))": FunctionFragment;
    "finalizeMigrateUnbondingLocks((address,address,uint256,uint256[],address))": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "l1Migrator()": FunctionFragment;
    "merkleSnapshotAddr()": FunctionFragment;
    "migratedDelegators(address)": FunctionFragment;
    "migratedSenders(address)": FunctionFragment;
    "migratedUnbondingLocks(address,uint256)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "setClaimStakeEnabled(bool)": FunctionFragment;
    "setDelegatorPoolImpl(address)": FunctionFragment;
    "setL1Migrator(address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "ticketBrokerAddr()": FunctionFragment;
    "tokenAddr()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DEFAULT_ADMIN_ROLE"
      | "GOVERNOR_ROLE"
      | "bondingManagerAddr"
      | "claimStake"
      | "claimStakeEnabled"
      | "claimedDelegatedStake"
      | "delegatorPoolImpl"
      | "delegatorPools"
      | "finalizeMigrateDelegator"
      | "finalizeMigrateSender"
      | "finalizeMigrateUnbondingLocks"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRole"
      | "l1Migrator"
      | "merkleSnapshotAddr"
      | "migratedDelegators"
      | "migratedSenders"
      | "migratedUnbondingLocks"
      | "renounceRole"
      | "revokeRole"
      | "setClaimStakeEnabled"
      | "setDelegatorPoolImpl"
      | "setL1Migrator"
      | "supportsInterface"
      | "ticketBrokerAddr"
      | "tokenAddr"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "GOVERNOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bondingManagerAddr",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimStake",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "claimStakeEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimedDelegatedStake",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "delegatorPoolImpl",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "delegatorPools",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "finalizeMigrateDelegator",
    values: [IMigrator.MigrateDelegatorParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "finalizeMigrateSender",
    values: [IMigrator.MigrateSenderParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "finalizeMigrateUnbondingLocks",
    values: [IMigrator.MigrateUnbondingLocksParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "l1Migrator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "merkleSnapshotAddr",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "migratedDelegators",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "migratedSenders",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "migratedUnbondingLocks",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setClaimStakeEnabled",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setDelegatorPoolImpl",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setL1Migrator",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "ticketBrokerAddr",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "tokenAddr", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GOVERNOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bondingManagerAddr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimStake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimStakeEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimedDelegatedStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delegatorPoolImpl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delegatorPools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalizeMigrateDelegator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalizeMigrateSender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalizeMigrateUnbondingLocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "l1Migrator", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "merkleSnapshotAddr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "migratedDelegators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "migratedSenders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "migratedUnbondingLocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setClaimStakeEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDelegatorPoolImpl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setL1Migrator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ticketBrokerAddr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenAddr", data: BytesLike): Result;

  events: {
    "DelegatorPoolCreated(address,address)": EventFragment;
    "MigrateDelegatorFinalized(tuple)": EventFragment;
    "MigrateSenderFinalized(tuple)": EventFragment;
    "MigrateUnbondingLocksFinalized(tuple)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "StakeClaimed(address,address,uint256,uint256)": EventFragment;
    "TxToL1(address,address,uint256,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DelegatorPoolCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MigrateDelegatorFinalized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MigrateSenderFinalized"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MigrateUnbondingLocksFinalized"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakeClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TxToL1"): EventFragment;
}

export interface DelegatorPoolCreatedEventObject {
  l1Addr: string;
  delegatorPool: string;
}
export type DelegatorPoolCreatedEvent = TypedEvent<
  [string, string],
  DelegatorPoolCreatedEventObject
>;

export type DelegatorPoolCreatedEventFilter =
  TypedEventFilter<DelegatorPoolCreatedEvent>;

export interface MigrateDelegatorFinalizedEventObject {
  params: IMigrator.MigrateDelegatorParamsStructOutput;
}
export type MigrateDelegatorFinalizedEvent = TypedEvent<
  [IMigrator.MigrateDelegatorParamsStructOutput],
  MigrateDelegatorFinalizedEventObject
>;

export type MigrateDelegatorFinalizedEventFilter =
  TypedEventFilter<MigrateDelegatorFinalizedEvent>;

export interface MigrateSenderFinalizedEventObject {
  params: IMigrator.MigrateSenderParamsStructOutput;
}
export type MigrateSenderFinalizedEvent = TypedEvent<
  [IMigrator.MigrateSenderParamsStructOutput],
  MigrateSenderFinalizedEventObject
>;

export type MigrateSenderFinalizedEventFilter =
  TypedEventFilter<MigrateSenderFinalizedEvent>;

export interface MigrateUnbondingLocksFinalizedEventObject {
  params: IMigrator.MigrateUnbondingLocksParamsStructOutput;
}
export type MigrateUnbondingLocksFinalizedEvent = TypedEvent<
  [IMigrator.MigrateUnbondingLocksParamsStructOutput],
  MigrateUnbondingLocksFinalizedEventObject
>;

export type MigrateUnbondingLocksFinalizedEventFilter =
  TypedEventFilter<MigrateUnbondingLocksFinalizedEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface StakeClaimedEventObject {
  delegator: string;
  delegate: string;
  stake: BigNumber;
  fees: BigNumber;
}
export type StakeClaimedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  StakeClaimedEventObject
>;

export type StakeClaimedEventFilter = TypedEventFilter<StakeClaimedEvent>;

export interface TxToL1EventObject {
  _from: string;
  _to: string;
  _id: BigNumber;
  _data: string;
}
export type TxToL1Event = TypedEvent<
  [string, string, BigNumber, string],
  TxToL1EventObject
>;

export type TxToL1EventFilter = TypedEventFilter<TxToL1Event>;

export interface L2Migrator extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: L2MigratorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    GOVERNOR_ROLE(overrides?: CallOverrides): Promise<[string]>;

    bondingManagerAddr(overrides?: CallOverrides): Promise<[string]>;

    claimStake(
      _delegate: PromiseOrValue<string>,
      _stake: PromiseOrValue<BigNumberish>,
      _fees: PromiseOrValue<BigNumberish>,
      _proof: PromiseOrValue<BytesLike>[],
      _newDelegate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimStakeEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    claimedDelegatedStake(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    delegatorPoolImpl(overrides?: CallOverrides): Promise<[string]>;

    delegatorPools(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    finalizeMigrateDelegator(
      _params: IMigrator.MigrateDelegatorParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    finalizeMigrateSender(
      _params: IMigrator.MigrateSenderParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    finalizeMigrateUnbondingLocks(
      _params: IMigrator.MigrateUnbondingLocksParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    l1Migrator(overrides?: CallOverrides): Promise<[string]>;

    merkleSnapshotAddr(overrides?: CallOverrides): Promise<[string]>;

    migratedDelegators(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    migratedSenders(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    migratedUnbondingLocks(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setClaimStakeEnabled(
      _enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDelegatorPoolImpl(
      _delegatorPoolImpl: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setL1Migrator(
      _l1Migrator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    ticketBrokerAddr(overrides?: CallOverrides): Promise<[string]>;

    tokenAddr(overrides?: CallOverrides): Promise<[string]>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  GOVERNOR_ROLE(overrides?: CallOverrides): Promise<string>;

  bondingManagerAddr(overrides?: CallOverrides): Promise<string>;

  claimStake(
    _delegate: PromiseOrValue<string>,
    _stake: PromiseOrValue<BigNumberish>,
    _fees: PromiseOrValue<BigNumberish>,
    _proof: PromiseOrValue<BytesLike>[],
    _newDelegate: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimStakeEnabled(overrides?: CallOverrides): Promise<boolean>;

  claimedDelegatedStake(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  delegatorPoolImpl(overrides?: CallOverrides): Promise<string>;

  delegatorPools(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  finalizeMigrateDelegator(
    _params: IMigrator.MigrateDelegatorParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  finalizeMigrateSender(
    _params: IMigrator.MigrateSenderParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  finalizeMigrateUnbondingLocks(
    _params: IMigrator.MigrateUnbondingLocksParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getRoleAdmin(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  grantRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  l1Migrator(overrides?: CallOverrides): Promise<string>;

  merkleSnapshotAddr(overrides?: CallOverrides): Promise<string>;

  migratedDelegators(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  migratedSenders(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  migratedUnbondingLocks(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  renounceRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setClaimStakeEnabled(
    _enabled: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDelegatorPoolImpl(
    _delegatorPoolImpl: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setL1Migrator(
    _l1Migrator: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  ticketBrokerAddr(overrides?: CallOverrides): Promise<string>;

  tokenAddr(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    GOVERNOR_ROLE(overrides?: CallOverrides): Promise<string>;

    bondingManagerAddr(overrides?: CallOverrides): Promise<string>;

    claimStake(
      _delegate: PromiseOrValue<string>,
      _stake: PromiseOrValue<BigNumberish>,
      _fees: PromiseOrValue<BigNumberish>,
      _proof: PromiseOrValue<BytesLike>[],
      _newDelegate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    claimStakeEnabled(overrides?: CallOverrides): Promise<boolean>;

    claimedDelegatedStake(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    delegatorPoolImpl(overrides?: CallOverrides): Promise<string>;

    delegatorPools(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    finalizeMigrateDelegator(
      _params: IMigrator.MigrateDelegatorParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    finalizeMigrateSender(
      _params: IMigrator.MigrateSenderParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    finalizeMigrateUnbondingLocks(
      _params: IMigrator.MigrateUnbondingLocksParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    l1Migrator(overrides?: CallOverrides): Promise<string>;

    merkleSnapshotAddr(overrides?: CallOverrides): Promise<string>;

    migratedDelegators(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    migratedSenders(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    migratedUnbondingLocks(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setClaimStakeEnabled(
      _enabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setDelegatorPoolImpl(
      _delegatorPoolImpl: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setL1Migrator(
      _l1Migrator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    ticketBrokerAddr(overrides?: CallOverrides): Promise<string>;

    tokenAddr(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "DelegatorPoolCreated(address,address)"(
      l1Addr?: PromiseOrValue<string> | null,
      delegatorPool?: null
    ): DelegatorPoolCreatedEventFilter;
    DelegatorPoolCreated(
      l1Addr?: PromiseOrValue<string> | null,
      delegatorPool?: null
    ): DelegatorPoolCreatedEventFilter;

    "MigrateDelegatorFinalized(tuple)"(
      params?: null
    ): MigrateDelegatorFinalizedEventFilter;
    MigrateDelegatorFinalized(
      params?: null
    ): MigrateDelegatorFinalizedEventFilter;

    "MigrateSenderFinalized(tuple)"(
      params?: null
    ): MigrateSenderFinalizedEventFilter;
    MigrateSenderFinalized(params?: null): MigrateSenderFinalizedEventFilter;

    "MigrateUnbondingLocksFinalized(tuple)"(
      params?: null
    ): MigrateUnbondingLocksFinalizedEventFilter;
    MigrateUnbondingLocksFinalized(
      params?: null
    ): MigrateUnbondingLocksFinalizedEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;

    "StakeClaimed(address,address,uint256,uint256)"(
      delegator?: PromiseOrValue<string> | null,
      delegate?: null,
      stake?: null,
      fees?: null
    ): StakeClaimedEventFilter;
    StakeClaimed(
      delegator?: PromiseOrValue<string> | null,
      delegate?: null,
      stake?: null,
      fees?: null
    ): StakeClaimedEventFilter;

    "TxToL1(address,address,uint256,bytes)"(
      _from?: PromiseOrValue<string> | null,
      _to?: PromiseOrValue<string> | null,
      _id?: PromiseOrValue<BigNumberish> | null,
      _data?: null
    ): TxToL1EventFilter;
    TxToL1(
      _from?: PromiseOrValue<string> | null,
      _to?: PromiseOrValue<string> | null,
      _id?: PromiseOrValue<BigNumberish> | null,
      _data?: null
    ): TxToL1EventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    GOVERNOR_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    bondingManagerAddr(overrides?: CallOverrides): Promise<BigNumber>;

    claimStake(
      _delegate: PromiseOrValue<string>,
      _stake: PromiseOrValue<BigNumberish>,
      _fees: PromiseOrValue<BigNumberish>,
      _proof: PromiseOrValue<BytesLike>[],
      _newDelegate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimStakeEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    claimedDelegatedStake(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    delegatorPoolImpl(overrides?: CallOverrides): Promise<BigNumber>;

    delegatorPools(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    finalizeMigrateDelegator(
      _params: IMigrator.MigrateDelegatorParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    finalizeMigrateSender(
      _params: IMigrator.MigrateSenderParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    finalizeMigrateUnbondingLocks(
      _params: IMigrator.MigrateUnbondingLocksParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    l1Migrator(overrides?: CallOverrides): Promise<BigNumber>;

    merkleSnapshotAddr(overrides?: CallOverrides): Promise<BigNumber>;

    migratedDelegators(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    migratedSenders(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    migratedUnbondingLocks(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setClaimStakeEnabled(
      _enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDelegatorPoolImpl(
      _delegatorPoolImpl: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setL1Migrator(
      _l1Migrator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ticketBrokerAddr(overrides?: CallOverrides): Promise<BigNumber>;

    tokenAddr(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    GOVERNOR_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bondingManagerAddr(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimStake(
      _delegate: PromiseOrValue<string>,
      _stake: PromiseOrValue<BigNumberish>,
      _fees: PromiseOrValue<BigNumberish>,
      _proof: PromiseOrValue<BytesLike>[],
      _newDelegate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimStakeEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimedDelegatedStake(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    delegatorPoolImpl(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    delegatorPools(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    finalizeMigrateDelegator(
      _params: IMigrator.MigrateDelegatorParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    finalizeMigrateSender(
      _params: IMigrator.MigrateSenderParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    finalizeMigrateUnbondingLocks(
      _params: IMigrator.MigrateUnbondingLocksParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    l1Migrator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    merkleSnapshotAddr(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    migratedDelegators(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    migratedSenders(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    migratedUnbondingLocks(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setClaimStakeEnabled(
      _enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDelegatorPoolImpl(
      _delegatorPoolImpl: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setL1Migrator(
      _l1Migrator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ticketBrokerAddr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenAddr(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
