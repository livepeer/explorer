/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace IMigrator {
  export type MigrateDelegatorParamsStruct = {
    l1Addr: PromiseOrValue<string>;
    l2Addr: PromiseOrValue<string>;
    stake: PromiseOrValue<BigNumberish>;
    delegatedStake: PromiseOrValue<BigNumberish>;
    fees: PromiseOrValue<BigNumberish>;
    delegate: PromiseOrValue<string>;
  };

  export type MigrateDelegatorParamsStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    string
  ] & {
    l1Addr: string;
    l2Addr: string;
    stake: BigNumber;
    delegatedStake: BigNumber;
    fees: BigNumber;
    delegate: string;
  };

  export type MigrateSenderParamsStruct = {
    l1Addr: PromiseOrValue<string>;
    l2Addr: PromiseOrValue<string>;
    deposit: PromiseOrValue<BigNumberish>;
    reserve: PromiseOrValue<BigNumberish>;
  };

  export type MigrateSenderParamsStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber
  ] & {
    l1Addr: string;
    l2Addr: string;
    deposit: BigNumber;
    reserve: BigNumber;
  };

  export type MigrateUnbondingLocksParamsStruct = {
    l1Addr: PromiseOrValue<string>;
    l2Addr: PromiseOrValue<string>;
    total: PromiseOrValue<BigNumberish>;
    unbondingLockIds: PromiseOrValue<BigNumberish>[];
  };

  export type MigrateUnbondingLocksParamsStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber[]
  ] & {
    l1Addr: string;
    l2Addr: string;
    total: BigNumber;
    unbondingLockIds: BigNumber[];
  };
}

export interface L1MigratorInterface extends utils.Interface {
  functions: {
    "bondingManagerAddr()": FunctionFragment;
    "getMigrateDelegatorParams(address,address)": FunctionFragment;
    "getMigrateSenderParams(address,address)": FunctionFragment;
    "getMigrateUnbondingLocksParams(address,address,uint256[])": FunctionFragment;
    "inbox()": FunctionFragment;
    "l2MigratorAddr()": FunctionFragment;
    "migrateDelegator(address,address,bytes,uint256,uint256,uint256)": FunctionFragment;
    "migrateSender(address,address,bytes,uint256,uint256,uint256)": FunctionFragment;
    "migrateUnbondingLocks(address,address,uint256[],bytes,uint256,uint256,uint256)": FunctionFragment;
    "ticketBrokerAddr()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "bondingManagerAddr"
      | "getMigrateDelegatorParams"
      | "getMigrateSenderParams"
      | "getMigrateUnbondingLocksParams"
      | "inbox"
      | "l2MigratorAddr"
      | "migrateDelegator"
      | "migrateSender"
      | "migrateUnbondingLocks"
      | "ticketBrokerAddr"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "bondingManagerAddr",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMigrateDelegatorParams",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMigrateSenderParams",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMigrateUnbondingLocksParams",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(functionFragment: "inbox", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "l2MigratorAddr",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "migrateDelegator",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "migrateSender",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "migrateUnbondingLocks",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "ticketBrokerAddr",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "bondingManagerAddr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMigrateDelegatorParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMigrateSenderParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMigrateUnbondingLocksParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "inbox", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "l2MigratorAddr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "migrateDelegator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "migrateSender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "migrateUnbondingLocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ticketBrokerAddr",
    data: BytesLike
  ): Result;

  events: {
    "MigrateDelegatorInitiated(uint256,tuple)": EventFragment;
    "MigrateSenderInitiated(uint256,tuple)": EventFragment;
    "MigrateUnbondingLocksInitiated(uint256,tuple)": EventFragment;
    "TxToL2(address,address,uint256,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "MigrateDelegatorInitiated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MigrateSenderInitiated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MigrateUnbondingLocksInitiated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TxToL2"): EventFragment;
}

export interface MigrateDelegatorInitiatedEventObject {
  seqNo: BigNumber;
  params: IMigrator.MigrateDelegatorParamsStructOutput;
}
export type MigrateDelegatorInitiatedEvent = TypedEvent<
  [BigNumber, IMigrator.MigrateDelegatorParamsStructOutput],
  MigrateDelegatorInitiatedEventObject
>;

export type MigrateDelegatorInitiatedEventFilter =
  TypedEventFilter<MigrateDelegatorInitiatedEvent>;

export interface MigrateSenderInitiatedEventObject {
  seqNo: BigNumber;
  params: IMigrator.MigrateSenderParamsStructOutput;
}
export type MigrateSenderInitiatedEvent = TypedEvent<
  [BigNumber, IMigrator.MigrateSenderParamsStructOutput],
  MigrateSenderInitiatedEventObject
>;

export type MigrateSenderInitiatedEventFilter =
  TypedEventFilter<MigrateSenderInitiatedEvent>;

export interface MigrateUnbondingLocksInitiatedEventObject {
  seqNo: BigNumber;
  params: IMigrator.MigrateUnbondingLocksParamsStructOutput;
}
export type MigrateUnbondingLocksInitiatedEvent = TypedEvent<
  [BigNumber, IMigrator.MigrateUnbondingLocksParamsStructOutput],
  MigrateUnbondingLocksInitiatedEventObject
>;

export type MigrateUnbondingLocksInitiatedEventFilter =
  TypedEventFilter<MigrateUnbondingLocksInitiatedEvent>;

export interface TxToL2EventObject {
  from: string;
  to: string;
  seqNum: BigNumber;
  data: string;
}
export type TxToL2Event = TypedEvent<
  [string, string, BigNumber, string],
  TxToL2EventObject
>;

export type TxToL2EventFilter = TypedEventFilter<TxToL2Event>;

export interface L1Migrator extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: L1MigratorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    bondingManagerAddr(overrides?: CallOverrides): Promise<[string]>;

    getMigrateDelegatorParams(
      _l1Addr: PromiseOrValue<string>,
      _l2Addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, IMigrator.MigrateDelegatorParamsStructOutput] & {
        data: string;
        params: IMigrator.MigrateDelegatorParamsStructOutput;
      }
    >;

    getMigrateSenderParams(
      _l1Addr: PromiseOrValue<string>,
      _l2Addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, IMigrator.MigrateSenderParamsStructOutput] & {
        data: string;
        params: IMigrator.MigrateSenderParamsStructOutput;
      }
    >;

    getMigrateUnbondingLocksParams(
      _l1Addr: PromiseOrValue<string>,
      _l2Addr: PromiseOrValue<string>,
      _unbondingLockIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<
      [string, IMigrator.MigrateUnbondingLocksParamsStructOutput] & {
        data: string;
        params: IMigrator.MigrateUnbondingLocksParamsStructOutput;
      }
    >;

    inbox(overrides?: CallOverrides): Promise<[string]>;

    l2MigratorAddr(overrides?: CallOverrides): Promise<[string]>;

    migrateDelegator(
      _l1Addr: PromiseOrValue<string>,
      _l2Addr: PromiseOrValue<string>,
      _sig: PromiseOrValue<BytesLike>,
      _maxGas: PromiseOrValue<BigNumberish>,
      _gasPriceBid: PromiseOrValue<BigNumberish>,
      _maxSubmissionCost: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    migrateSender(
      _l1Addr: PromiseOrValue<string>,
      _l2Addr: PromiseOrValue<string>,
      _sig: PromiseOrValue<BytesLike>,
      _maxGas: PromiseOrValue<BigNumberish>,
      _gasPriceBid: PromiseOrValue<BigNumberish>,
      _maxSubmissionCost: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    migrateUnbondingLocks(
      _l1Addr: PromiseOrValue<string>,
      _l2Addr: PromiseOrValue<string>,
      _unbondingLockIds: PromiseOrValue<BigNumberish>[],
      _sig: PromiseOrValue<BytesLike>,
      _maxGas: PromiseOrValue<BigNumberish>,
      _gasPriceBid: PromiseOrValue<BigNumberish>,
      _maxSubmissionCost: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    ticketBrokerAddr(overrides?: CallOverrides): Promise<[string]>;
  };

  bondingManagerAddr(overrides?: CallOverrides): Promise<string>;

  getMigrateDelegatorParams(
    _l1Addr: PromiseOrValue<string>,
    _l2Addr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [string, IMigrator.MigrateDelegatorParamsStructOutput] & {
      data: string;
      params: IMigrator.MigrateDelegatorParamsStructOutput;
    }
  >;

  getMigrateSenderParams(
    _l1Addr: PromiseOrValue<string>,
    _l2Addr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [string, IMigrator.MigrateSenderParamsStructOutput] & {
      data: string;
      params: IMigrator.MigrateSenderParamsStructOutput;
    }
  >;

  getMigrateUnbondingLocksParams(
    _l1Addr: PromiseOrValue<string>,
    _l2Addr: PromiseOrValue<string>,
    _unbondingLockIds: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<
    [string, IMigrator.MigrateUnbondingLocksParamsStructOutput] & {
      data: string;
      params: IMigrator.MigrateUnbondingLocksParamsStructOutput;
    }
  >;

  inbox(overrides?: CallOverrides): Promise<string>;

  l2MigratorAddr(overrides?: CallOverrides): Promise<string>;

  migrateDelegator(
    _l1Addr: PromiseOrValue<string>,
    _l2Addr: PromiseOrValue<string>,
    _sig: PromiseOrValue<BytesLike>,
    _maxGas: PromiseOrValue<BigNumberish>,
    _gasPriceBid: PromiseOrValue<BigNumberish>,
    _maxSubmissionCost: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  migrateSender(
    _l1Addr: PromiseOrValue<string>,
    _l2Addr: PromiseOrValue<string>,
    _sig: PromiseOrValue<BytesLike>,
    _maxGas: PromiseOrValue<BigNumberish>,
    _gasPriceBid: PromiseOrValue<BigNumberish>,
    _maxSubmissionCost: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  migrateUnbondingLocks(
    _l1Addr: PromiseOrValue<string>,
    _l2Addr: PromiseOrValue<string>,
    _unbondingLockIds: PromiseOrValue<BigNumberish>[],
    _sig: PromiseOrValue<BytesLike>,
    _maxGas: PromiseOrValue<BigNumberish>,
    _gasPriceBid: PromiseOrValue<BigNumberish>,
    _maxSubmissionCost: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  ticketBrokerAddr(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    bondingManagerAddr(overrides?: CallOverrides): Promise<string>;

    getMigrateDelegatorParams(
      _l1Addr: PromiseOrValue<string>,
      _l2Addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, IMigrator.MigrateDelegatorParamsStructOutput] & {
        data: string;
        params: IMigrator.MigrateDelegatorParamsStructOutput;
      }
    >;

    getMigrateSenderParams(
      _l1Addr: PromiseOrValue<string>,
      _l2Addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, IMigrator.MigrateSenderParamsStructOutput] & {
        data: string;
        params: IMigrator.MigrateSenderParamsStructOutput;
      }
    >;

    getMigrateUnbondingLocksParams(
      _l1Addr: PromiseOrValue<string>,
      _l2Addr: PromiseOrValue<string>,
      _unbondingLockIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<
      [string, IMigrator.MigrateUnbondingLocksParamsStructOutput] & {
        data: string;
        params: IMigrator.MigrateUnbondingLocksParamsStructOutput;
      }
    >;

    inbox(overrides?: CallOverrides): Promise<string>;

    l2MigratorAddr(overrides?: CallOverrides): Promise<string>;

    migrateDelegator(
      _l1Addr: PromiseOrValue<string>,
      _l2Addr: PromiseOrValue<string>,
      _sig: PromiseOrValue<BytesLike>,
      _maxGas: PromiseOrValue<BigNumberish>,
      _gasPriceBid: PromiseOrValue<BigNumberish>,
      _maxSubmissionCost: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    migrateSender(
      _l1Addr: PromiseOrValue<string>,
      _l2Addr: PromiseOrValue<string>,
      _sig: PromiseOrValue<BytesLike>,
      _maxGas: PromiseOrValue<BigNumberish>,
      _gasPriceBid: PromiseOrValue<BigNumberish>,
      _maxSubmissionCost: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    migrateUnbondingLocks(
      _l1Addr: PromiseOrValue<string>,
      _l2Addr: PromiseOrValue<string>,
      _unbondingLockIds: PromiseOrValue<BigNumberish>[],
      _sig: PromiseOrValue<BytesLike>,
      _maxGas: PromiseOrValue<BigNumberish>,
      _gasPriceBid: PromiseOrValue<BigNumberish>,
      _maxSubmissionCost: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    ticketBrokerAddr(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "MigrateDelegatorInitiated(uint256,tuple)"(
      seqNo?: PromiseOrValue<BigNumberish> | null,
      params?: null
    ): MigrateDelegatorInitiatedEventFilter;
    MigrateDelegatorInitiated(
      seqNo?: PromiseOrValue<BigNumberish> | null,
      params?: null
    ): MigrateDelegatorInitiatedEventFilter;

    "MigrateSenderInitiated(uint256,tuple)"(
      seqNo?: PromiseOrValue<BigNumberish> | null,
      params?: null
    ): MigrateSenderInitiatedEventFilter;
    MigrateSenderInitiated(
      seqNo?: PromiseOrValue<BigNumberish> | null,
      params?: null
    ): MigrateSenderInitiatedEventFilter;

    "MigrateUnbondingLocksInitiated(uint256,tuple)"(
      seqNo?: PromiseOrValue<BigNumberish> | null,
      params?: null
    ): MigrateUnbondingLocksInitiatedEventFilter;
    MigrateUnbondingLocksInitiated(
      seqNo?: PromiseOrValue<BigNumberish> | null,
      params?: null
    ): MigrateUnbondingLocksInitiatedEventFilter;

    "TxToL2(address,address,uint256,bytes)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      seqNum?: PromiseOrValue<BigNumberish> | null,
      data?: null
    ): TxToL2EventFilter;
    TxToL2(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      seqNum?: PromiseOrValue<BigNumberish> | null,
      data?: null
    ): TxToL2EventFilter;
  };

  estimateGas: {
    bondingManagerAddr(overrides?: CallOverrides): Promise<BigNumber>;

    getMigrateDelegatorParams(
      _l1Addr: PromiseOrValue<string>,
      _l2Addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMigrateSenderParams(
      _l1Addr: PromiseOrValue<string>,
      _l2Addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMigrateUnbondingLocksParams(
      _l1Addr: PromiseOrValue<string>,
      _l2Addr: PromiseOrValue<string>,
      _unbondingLockIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    inbox(overrides?: CallOverrides): Promise<BigNumber>;

    l2MigratorAddr(overrides?: CallOverrides): Promise<BigNumber>;

    migrateDelegator(
      _l1Addr: PromiseOrValue<string>,
      _l2Addr: PromiseOrValue<string>,
      _sig: PromiseOrValue<BytesLike>,
      _maxGas: PromiseOrValue<BigNumberish>,
      _gasPriceBid: PromiseOrValue<BigNumberish>,
      _maxSubmissionCost: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    migrateSender(
      _l1Addr: PromiseOrValue<string>,
      _l2Addr: PromiseOrValue<string>,
      _sig: PromiseOrValue<BytesLike>,
      _maxGas: PromiseOrValue<BigNumberish>,
      _gasPriceBid: PromiseOrValue<BigNumberish>,
      _maxSubmissionCost: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    migrateUnbondingLocks(
      _l1Addr: PromiseOrValue<string>,
      _l2Addr: PromiseOrValue<string>,
      _unbondingLockIds: PromiseOrValue<BigNumberish>[],
      _sig: PromiseOrValue<BytesLike>,
      _maxGas: PromiseOrValue<BigNumberish>,
      _gasPriceBid: PromiseOrValue<BigNumberish>,
      _maxSubmissionCost: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    ticketBrokerAddr(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    bondingManagerAddr(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMigrateDelegatorParams(
      _l1Addr: PromiseOrValue<string>,
      _l2Addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMigrateSenderParams(
      _l1Addr: PromiseOrValue<string>,
      _l2Addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMigrateUnbondingLocksParams(
      _l1Addr: PromiseOrValue<string>,
      _l2Addr: PromiseOrValue<string>,
      _unbondingLockIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    inbox(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    l2MigratorAddr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    migrateDelegator(
      _l1Addr: PromiseOrValue<string>,
      _l2Addr: PromiseOrValue<string>,
      _sig: PromiseOrValue<BytesLike>,
      _maxGas: PromiseOrValue<BigNumberish>,
      _gasPriceBid: PromiseOrValue<BigNumberish>,
      _maxSubmissionCost: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    migrateSender(
      _l1Addr: PromiseOrValue<string>,
      _l2Addr: PromiseOrValue<string>,
      _sig: PromiseOrValue<BytesLike>,
      _maxGas: PromiseOrValue<BigNumberish>,
      _gasPriceBid: PromiseOrValue<BigNumberish>,
      _maxSubmissionCost: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    migrateUnbondingLocks(
      _l1Addr: PromiseOrValue<string>,
      _l2Addr: PromiseOrValue<string>,
      _unbondingLockIds: PromiseOrValue<BigNumberish>[],
      _sig: PromiseOrValue<BytesLike>,
      _maxGas: PromiseOrValue<BigNumberish>,
      _gasPriceBid: PromiseOrValue<BigNumberish>,
      _maxSubmissionCost: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    ticketBrokerAddr(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
