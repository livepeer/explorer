/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface L1BondingManagerInterface extends utils.Interface {
  functions: {
    "activeTranscoderSetDEPRECATED(uint256)": FunctionFragment;
    "maxEarningsClaimsRounds()": FunctionFragment;
    "numActiveTranscodersDEPRECATED()": FunctionFragment;
    "currentRoundTotalActiveStake()": FunctionFragment;
    "nextRoundTotalActiveStake()": FunctionFragment;
    "targetContractId()": FunctionFragment;
    "unbondingPeriod()": FunctionFragment;
    "setController(address)": FunctionFragment;
    "controller()": FunctionFragment;
    "setUnbondingPeriod(uint64)": FunctionFragment;
    "setNumActiveTranscoders(uint256)": FunctionFragment;
    "setMaxEarningsClaimsRounds(uint256)": FunctionFragment;
    "executeLIP77(uint256)": FunctionFragment;
    "transcoder(uint256,uint256)": FunctionFragment;
    "bond(uint256,address)": FunctionFragment;
    "unbond(uint256)": FunctionFragment;
    "rebond(uint256)": FunctionFragment;
    "rebondFromUnbonded(address,uint256)": FunctionFragment;
    "withdrawStake(uint256)": FunctionFragment;
    "withdrawFees()": FunctionFragment;
    "reward()": FunctionFragment;
    "updateTranscoderWithFees(address,uint256,uint256)": FunctionFragment;
    "slashTranscoder(address,address,uint256,uint256)": FunctionFragment;
    "claimEarnings(uint256)": FunctionFragment;
    "claimSnapshotEarnings(uint256,uint256,bytes32[],bytes)": FunctionFragment;
    "setCurrentRoundTotalActiveStake()": FunctionFragment;
    "transcoderWithHint(uint256,uint256,address,address)": FunctionFragment;
    "bondWithHint(uint256,address,address,address,address,address)": FunctionFragment;
    "unbondWithHint(uint256,address,address)": FunctionFragment;
    "rebondWithHint(uint256,address,address)": FunctionFragment;
    "rebondFromUnbondedWithHint(address,uint256,address,address)": FunctionFragment;
    "rewardWithHint(address,address)": FunctionFragment;
    "pendingStake(address,uint256)": FunctionFragment;
    "pendingFees(address,uint256)": FunctionFragment;
    "transcoderTotalStake(address)": FunctionFragment;
    "transcoderStatus(address)": FunctionFragment;
    "delegatorStatus(address)": FunctionFragment;
    "getTranscoder(address)": FunctionFragment;
    "getTranscoderEarningsPoolForRound(address,uint256)": FunctionFragment;
    "getDelegator(address)": FunctionFragment;
    "getDelegatorUnbondingLock(address,uint256)": FunctionFragment;
    "getTranscoderPoolMaxSize()": FunctionFragment;
    "getTranscoderPoolSize()": FunctionFragment;
    "getFirstTranscoderInPool()": FunctionFragment;
    "getNextTranscoderInPool(address)": FunctionFragment;
    "getTotalBonded()": FunctionFragment;
    "isActiveTranscoder(address)": FunctionFragment;
    "isRegisteredTranscoder(address)": FunctionFragment;
    "isValidUnbondingLock(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "activeTranscoderSetDEPRECATED"
      | "maxEarningsClaimsRounds"
      | "numActiveTranscodersDEPRECATED"
      | "currentRoundTotalActiveStake"
      | "nextRoundTotalActiveStake"
      | "targetContractId"
      | "unbondingPeriod"
      | "setController"
      | "controller"
      | "setUnbondingPeriod"
      | "setNumActiveTranscoders"
      | "setMaxEarningsClaimsRounds"
      | "executeLIP77"
      | "transcoder"
      | "bond"
      | "unbond"
      | "rebond"
      | "rebondFromUnbonded"
      | "withdrawStake"
      | "withdrawFees"
      | "reward"
      | "updateTranscoderWithFees"
      | "slashTranscoder"
      | "claimEarnings"
      | "claimSnapshotEarnings"
      | "setCurrentRoundTotalActiveStake"
      | "transcoderWithHint"
      | "bondWithHint"
      | "unbondWithHint"
      | "rebondWithHint"
      | "rebondFromUnbondedWithHint"
      | "rewardWithHint"
      | "pendingStake"
      | "pendingFees"
      | "transcoderTotalStake"
      | "transcoderStatus"
      | "delegatorStatus"
      | "getTranscoder"
      | "getTranscoderEarningsPoolForRound"
      | "getDelegator"
      | "getDelegatorUnbondingLock"
      | "getTranscoderPoolMaxSize"
      | "getTranscoderPoolSize"
      | "getFirstTranscoderInPool"
      | "getNextTranscoderInPool"
      | "getTotalBonded"
      | "isActiveTranscoder"
      | "isRegisteredTranscoder"
      | "isValidUnbondingLock"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "activeTranscoderSetDEPRECATED",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "maxEarningsClaimsRounds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "numActiveTranscodersDEPRECATED",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentRoundTotalActiveStake",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextRoundTotalActiveStake",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "targetContractId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unbondingPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setController",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "controller",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setUnbondingPeriod",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setNumActiveTranscoders",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxEarningsClaimsRounds",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "executeLIP77",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transcoder",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "bond",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "unbond",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "rebond",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "rebondFromUnbonded",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawStake",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFees",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "reward", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateTranscoderWithFees",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "slashTranscoder",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "claimEarnings",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimSnapshotEarnings",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setCurrentRoundTotalActiveStake",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transcoderWithHint",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "bondWithHint",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "unbondWithHint",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "rebondWithHint",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "rebondFromUnbondedWithHint",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardWithHint",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingStake",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingFees",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transcoderTotalStake",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transcoderStatus",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "delegatorStatus",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTranscoder",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTranscoderEarningsPoolForRound",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDelegator",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDelegatorUnbondingLock",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTranscoderPoolMaxSize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTranscoderPoolSize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFirstTranscoderInPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNextTranscoderInPool",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalBonded",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isActiveTranscoder",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isRegisteredTranscoder",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidUnbondingLock",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "activeTranscoderSetDEPRECATED",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxEarningsClaimsRounds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numActiveTranscodersDEPRECATED",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentRoundTotalActiveStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextRoundTotalActiveStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "targetContractId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unbondingPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "controller", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setUnbondingPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNumActiveTranscoders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxEarningsClaimsRounds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeLIP77",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transcoder", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bond", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unbond", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rebond", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rebondFromUnbonded",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reward", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateTranscoderWithFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "slashTranscoder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimEarnings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimSnapshotEarnings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCurrentRoundTotalActiveStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transcoderWithHint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bondWithHint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unbondWithHint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rebondWithHint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rebondFromUnbondedWithHint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardWithHint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transcoderTotalStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transcoderStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delegatorStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTranscoder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTranscoderEarningsPoolForRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDelegator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDelegatorUnbondingLock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTranscoderPoolMaxSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTranscoderPoolSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFirstTranscoderInPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNextTranscoderInPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalBonded",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isActiveTranscoder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRegisteredTranscoder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidUnbondingLock",
    data: BytesLike
  ): Result;

  events: {
    "TranscoderUpdate(address,uint256,uint256)": EventFragment;
    "TranscoderActivated(address,uint256)": EventFragment;
    "TranscoderDeactivated(address,uint256)": EventFragment;
    "TranscoderSlashed(address,address,uint256,uint256)": EventFragment;
    "Reward(address,uint256)": EventFragment;
    "Bond(address,address,address,uint256,uint256)": EventFragment;
    "Unbond(address,address,uint256,uint256,uint256)": EventFragment;
    "Rebond(address,address,uint256,uint256)": EventFragment;
    "WithdrawStake(address,uint256,uint256,uint256)": EventFragment;
    "WithdrawFees(address)": EventFragment;
    "EarningsClaimed(address,address,uint256,uint256,uint256,uint256)": EventFragment;
    "SetController(address)": EventFragment;
    "ParameterUpdate(string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "TranscoderUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TranscoderActivated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TranscoderDeactivated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TranscoderSlashed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Reward"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Bond"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unbond"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Rebond"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawStake"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawFees"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EarningsClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetController"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ParameterUpdate"): EventFragment;
}

export interface TranscoderUpdateEventObject {
  transcoder: string;
  rewardCut: BigNumber;
  feeShare: BigNumber;
}
export type TranscoderUpdateEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  TranscoderUpdateEventObject
>;

export type TranscoderUpdateEventFilter =
  TypedEventFilter<TranscoderUpdateEvent>;

export interface TranscoderActivatedEventObject {
  transcoder: string;
  activationRound: BigNumber;
}
export type TranscoderActivatedEvent = TypedEvent<
  [string, BigNumber],
  TranscoderActivatedEventObject
>;

export type TranscoderActivatedEventFilter =
  TypedEventFilter<TranscoderActivatedEvent>;

export interface TranscoderDeactivatedEventObject {
  transcoder: string;
  deactivationRound: BigNumber;
}
export type TranscoderDeactivatedEvent = TypedEvent<
  [string, BigNumber],
  TranscoderDeactivatedEventObject
>;

export type TranscoderDeactivatedEventFilter =
  TypedEventFilter<TranscoderDeactivatedEvent>;

export interface TranscoderSlashedEventObject {
  transcoder: string;
  finder: string;
  penalty: BigNumber;
  finderReward: BigNumber;
}
export type TranscoderSlashedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  TranscoderSlashedEventObject
>;

export type TranscoderSlashedEventFilter =
  TypedEventFilter<TranscoderSlashedEvent>;

export interface RewardEventObject {
  transcoder: string;
  amount: BigNumber;
}
export type RewardEvent = TypedEvent<[string, BigNumber], RewardEventObject>;

export type RewardEventFilter = TypedEventFilter<RewardEvent>;

export interface BondEventObject {
  newDelegate: string;
  oldDelegate: string;
  delegator: string;
  additionalAmount: BigNumber;
  bondedAmount: BigNumber;
}
export type BondEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  BondEventObject
>;

export type BondEventFilter = TypedEventFilter<BondEvent>;

export interface UnbondEventObject {
  delegate: string;
  delegator: string;
  unbondingLockId: BigNumber;
  amount: BigNumber;
  withdrawRound: BigNumber;
}
export type UnbondEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber],
  UnbondEventObject
>;

export type UnbondEventFilter = TypedEventFilter<UnbondEvent>;

export interface RebondEventObject {
  delegate: string;
  delegator: string;
  unbondingLockId: BigNumber;
  amount: BigNumber;
}
export type RebondEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  RebondEventObject
>;

export type RebondEventFilter = TypedEventFilter<RebondEvent>;

export interface WithdrawStakeEventObject {
  delegator: string;
  unbondingLockId: BigNumber;
  amount: BigNumber;
  withdrawRound: BigNumber;
}
export type WithdrawStakeEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  WithdrawStakeEventObject
>;

export type WithdrawStakeEventFilter = TypedEventFilter<WithdrawStakeEvent>;

export interface WithdrawFeesEventObject {
  delegator: string;
}
export type WithdrawFeesEvent = TypedEvent<[string], WithdrawFeesEventObject>;

export type WithdrawFeesEventFilter = TypedEventFilter<WithdrawFeesEvent>;

export interface EarningsClaimedEventObject {
  delegate: string;
  delegator: string;
  rewards: BigNumber;
  fees: BigNumber;
  startRound: BigNumber;
  endRound: BigNumber;
}
export type EarningsClaimedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, BigNumber],
  EarningsClaimedEventObject
>;

export type EarningsClaimedEventFilter = TypedEventFilter<EarningsClaimedEvent>;

export interface SetControllerEventObject {
  controller: string;
}
export type SetControllerEvent = TypedEvent<[string], SetControllerEventObject>;

export type SetControllerEventFilter = TypedEventFilter<SetControllerEvent>;

export interface ParameterUpdateEventObject {
  param: string;
}
export type ParameterUpdateEvent = TypedEvent<
  [string],
  ParameterUpdateEventObject
>;

export type ParameterUpdateEventFilter = TypedEventFilter<ParameterUpdateEvent>;

export interface L1BondingManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: L1BondingManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    activeTranscoderSetDEPRECATED(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { totalStake: BigNumber }>;

    maxEarningsClaimsRounds(overrides?: CallOverrides): Promise<[BigNumber]>;

    numActiveTranscodersDEPRECATED(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    currentRoundTotalActiveStake(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    nextRoundTotalActiveStake(overrides?: CallOverrides): Promise<[BigNumber]>;

    targetContractId(overrides?: CallOverrides): Promise<[string]>;

    unbondingPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    setController(
      _controller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    controller(overrides?: CallOverrides): Promise<[string]>;

    setUnbondingPeriod(
      _unbondingPeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setNumActiveTranscoders(
      _numActiveTranscoders: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMaxEarningsClaimsRounds(
      _maxEarningsClaimsRounds: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executeLIP77(
      _bondedAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transcoder(
      _rewardCut: PromiseOrValue<BigNumberish>,
      _feeShare: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    bond(
      _amount: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unbond(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rebond(
      _unbondingLockId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rebondFromUnbonded(
      _to: PromiseOrValue<string>,
      _unbondingLockId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawStake(
      _unbondingLockId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawFees(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    reward(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateTranscoderWithFees(
      _transcoder: PromiseOrValue<string>,
      _fees: PromiseOrValue<BigNumberish>,
      _round: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    slashTranscoder(
      _transcoder: PromiseOrValue<string>,
      _finder: PromiseOrValue<string>,
      _slashAmount: PromiseOrValue<BigNumberish>,
      _finderFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimEarnings(
      _endRound: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimSnapshotEarnings(
      _pendingStake: PromiseOrValue<BigNumberish>,
      _pendingFees: PromiseOrValue<BigNumberish>,
      _earningsProof: PromiseOrValue<BytesLike>[],
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setCurrentRoundTotalActiveStake(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transcoderWithHint(
      _rewardCut: PromiseOrValue<BigNumberish>,
      _feeShare: PromiseOrValue<BigNumberish>,
      _newPosPrev: PromiseOrValue<string>,
      _newPosNext: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    bondWithHint(
      _amount: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      _oldDelegateNewPosPrev: PromiseOrValue<string>,
      _oldDelegateNewPosNext: PromiseOrValue<string>,
      _currDelegateNewPosPrev: PromiseOrValue<string>,
      _currDelegateNewPosNext: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unbondWithHint(
      _amount: PromiseOrValue<BigNumberish>,
      _newPosPrev: PromiseOrValue<string>,
      _newPosNext: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rebondWithHint(
      _unbondingLockId: PromiseOrValue<BigNumberish>,
      _newPosPrev: PromiseOrValue<string>,
      _newPosNext: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rebondFromUnbondedWithHint(
      _to: PromiseOrValue<string>,
      _unbondingLockId: PromiseOrValue<BigNumberish>,
      _newPosPrev: PromiseOrValue<string>,
      _newPosNext: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rewardWithHint(
      _newPosPrev: PromiseOrValue<string>,
      _newPosNext: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    pendingStake(
      _delegator: PromiseOrValue<string>,
      _endRound: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    pendingFees(
      _delegator: PromiseOrValue<string>,
      _endRound: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transcoderTotalStake(
      _transcoder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transcoderStatus(
      _transcoder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    delegatorStatus(
      _delegator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getTranscoder(
      _transcoder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        lastRewardRound: BigNumber;
        rewardCut: BigNumber;
        feeShare: BigNumber;
        lastActiveStakeUpdateRound: BigNumber;
        activationRound: BigNumber;
        deactivationRound: BigNumber;
        activeCumulativeRewards: BigNumber;
        cumulativeRewards: BigNumber;
        cumulativeFees: BigNumber;
        lastFeeRound: BigNumber;
      }
    >;

    getTranscoderEarningsPoolForRound(
      _transcoder: PromiseOrValue<string>,
      _round: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber,
        BigNumber
      ] & {
        rewardPool: BigNumber;
        feePool: BigNumber;
        totalStake: BigNumber;
        claimableStake: BigNumber;
        transcoderRewardCut: BigNumber;
        transcoderFeeShare: BigNumber;
        transcoderRewardPool: BigNumber;
        transcoderFeePool: BigNumber;
        hasTranscoderRewardFeePool: boolean;
        cumulativeRewardFactor: BigNumber;
        cumulativeFeeFactor: BigNumber;
      }
    >;

    getDelegator(
      _delegator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        bondedAmount: BigNumber;
        fees: BigNumber;
        delegateAddress: string;
        delegatedAmount: BigNumber;
        startRound: BigNumber;
        lastClaimRound: BigNumber;
        nextUnbondingLockId: BigNumber;
      }
    >;

    getDelegatorUnbondingLock(
      _delegator: PromiseOrValue<string>,
      _unbondingLockId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; withdrawRound: BigNumber }
    >;

    getTranscoderPoolMaxSize(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTranscoderPoolSize(overrides?: CallOverrides): Promise<[BigNumber]>;

    getFirstTranscoderInPool(overrides?: CallOverrides): Promise<[string]>;

    getNextTranscoderInPool(
      _transcoder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getTotalBonded(overrides?: CallOverrides): Promise<[BigNumber]>;

    isActiveTranscoder(
      _transcoder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isRegisteredTranscoder(
      _transcoder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isValidUnbondingLock(
      _delegator: PromiseOrValue<string>,
      _unbondingLockId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  activeTranscoderSetDEPRECATED(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  maxEarningsClaimsRounds(overrides?: CallOverrides): Promise<BigNumber>;

  numActiveTranscodersDEPRECATED(overrides?: CallOverrides): Promise<BigNumber>;

  currentRoundTotalActiveStake(overrides?: CallOverrides): Promise<BigNumber>;

  nextRoundTotalActiveStake(overrides?: CallOverrides): Promise<BigNumber>;

  targetContractId(overrides?: CallOverrides): Promise<string>;

  unbondingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  setController(
    _controller: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  controller(overrides?: CallOverrides): Promise<string>;

  setUnbondingPeriod(
    _unbondingPeriod: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setNumActiveTranscoders(
    _numActiveTranscoders: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMaxEarningsClaimsRounds(
    _maxEarningsClaimsRounds: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executeLIP77(
    _bondedAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transcoder(
    _rewardCut: PromiseOrValue<BigNumberish>,
    _feeShare: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  bond(
    _amount: PromiseOrValue<BigNumberish>,
    _to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unbond(
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rebond(
    _unbondingLockId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rebondFromUnbonded(
    _to: PromiseOrValue<string>,
    _unbondingLockId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawStake(
    _unbondingLockId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawFees(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  reward(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateTranscoderWithFees(
    _transcoder: PromiseOrValue<string>,
    _fees: PromiseOrValue<BigNumberish>,
    _round: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  slashTranscoder(
    _transcoder: PromiseOrValue<string>,
    _finder: PromiseOrValue<string>,
    _slashAmount: PromiseOrValue<BigNumberish>,
    _finderFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimEarnings(
    _endRound: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimSnapshotEarnings(
    _pendingStake: PromiseOrValue<BigNumberish>,
    _pendingFees: PromiseOrValue<BigNumberish>,
    _earningsProof: PromiseOrValue<BytesLike>[],
    _data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setCurrentRoundTotalActiveStake(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transcoderWithHint(
    _rewardCut: PromiseOrValue<BigNumberish>,
    _feeShare: PromiseOrValue<BigNumberish>,
    _newPosPrev: PromiseOrValue<string>,
    _newPosNext: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  bondWithHint(
    _amount: PromiseOrValue<BigNumberish>,
    _to: PromiseOrValue<string>,
    _oldDelegateNewPosPrev: PromiseOrValue<string>,
    _oldDelegateNewPosNext: PromiseOrValue<string>,
    _currDelegateNewPosPrev: PromiseOrValue<string>,
    _currDelegateNewPosNext: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unbondWithHint(
    _amount: PromiseOrValue<BigNumberish>,
    _newPosPrev: PromiseOrValue<string>,
    _newPosNext: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rebondWithHint(
    _unbondingLockId: PromiseOrValue<BigNumberish>,
    _newPosPrev: PromiseOrValue<string>,
    _newPosNext: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rebondFromUnbondedWithHint(
    _to: PromiseOrValue<string>,
    _unbondingLockId: PromiseOrValue<BigNumberish>,
    _newPosPrev: PromiseOrValue<string>,
    _newPosNext: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rewardWithHint(
    _newPosPrev: PromiseOrValue<string>,
    _newPosNext: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  pendingStake(
    _delegator: PromiseOrValue<string>,
    _endRound: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  pendingFees(
    _delegator: PromiseOrValue<string>,
    _endRound: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transcoderTotalStake(
    _transcoder: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transcoderStatus(
    _transcoder: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<number>;

  delegatorStatus(
    _delegator: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<number>;

  getTranscoder(
    _transcoder: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      lastRewardRound: BigNumber;
      rewardCut: BigNumber;
      feeShare: BigNumber;
      lastActiveStakeUpdateRound: BigNumber;
      activationRound: BigNumber;
      deactivationRound: BigNumber;
      activeCumulativeRewards: BigNumber;
      cumulativeRewards: BigNumber;
      cumulativeFees: BigNumber;
      lastFeeRound: BigNumber;
    }
  >;

  getTranscoderEarningsPoolForRound(
    _transcoder: PromiseOrValue<string>,
    _round: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      BigNumber,
      BigNumber
    ] & {
      rewardPool: BigNumber;
      feePool: BigNumber;
      totalStake: BigNumber;
      claimableStake: BigNumber;
      transcoderRewardCut: BigNumber;
      transcoderFeeShare: BigNumber;
      transcoderRewardPool: BigNumber;
      transcoderFeePool: BigNumber;
      hasTranscoderRewardFeePool: boolean;
      cumulativeRewardFactor: BigNumber;
      cumulativeFeeFactor: BigNumber;
    }
  >;

  getDelegator(
    _delegator: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      bondedAmount: BigNumber;
      fees: BigNumber;
      delegateAddress: string;
      delegatedAmount: BigNumber;
      startRound: BigNumber;
      lastClaimRound: BigNumber;
      nextUnbondingLockId: BigNumber;
    }
  >;

  getDelegatorUnbondingLock(
    _delegator: PromiseOrValue<string>,
    _unbondingLockId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { amount: BigNumber; withdrawRound: BigNumber }
  >;

  getTranscoderPoolMaxSize(overrides?: CallOverrides): Promise<BigNumber>;

  getTranscoderPoolSize(overrides?: CallOverrides): Promise<BigNumber>;

  getFirstTranscoderInPool(overrides?: CallOverrides): Promise<string>;

  getNextTranscoderInPool(
    _transcoder: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getTotalBonded(overrides?: CallOverrides): Promise<BigNumber>;

  isActiveTranscoder(
    _transcoder: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isRegisteredTranscoder(
    _transcoder: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isValidUnbondingLock(
    _delegator: PromiseOrValue<string>,
    _unbondingLockId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    activeTranscoderSetDEPRECATED(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxEarningsClaimsRounds(overrides?: CallOverrides): Promise<BigNumber>;

    numActiveTranscodersDEPRECATED(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentRoundTotalActiveStake(overrides?: CallOverrides): Promise<BigNumber>;

    nextRoundTotalActiveStake(overrides?: CallOverrides): Promise<BigNumber>;

    targetContractId(overrides?: CallOverrides): Promise<string>;

    unbondingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    setController(
      _controller: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    controller(overrides?: CallOverrides): Promise<string>;

    setUnbondingPeriod(
      _unbondingPeriod: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setNumActiveTranscoders(
      _numActiveTranscoders: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxEarningsClaimsRounds(
      _maxEarningsClaimsRounds: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    executeLIP77(
      _bondedAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    transcoder(
      _rewardCut: PromiseOrValue<BigNumberish>,
      _feeShare: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    bond(
      _amount: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    unbond(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    rebond(
      _unbondingLockId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    rebondFromUnbonded(
      _to: PromiseOrValue<string>,
      _unbondingLockId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawStake(
      _unbondingLockId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawFees(overrides?: CallOverrides): Promise<void>;

    reward(overrides?: CallOverrides): Promise<void>;

    updateTranscoderWithFees(
      _transcoder: PromiseOrValue<string>,
      _fees: PromiseOrValue<BigNumberish>,
      _round: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    slashTranscoder(
      _transcoder: PromiseOrValue<string>,
      _finder: PromiseOrValue<string>,
      _slashAmount: PromiseOrValue<BigNumberish>,
      _finderFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    claimEarnings(
      _endRound: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    claimSnapshotEarnings(
      _pendingStake: PromiseOrValue<BigNumberish>,
      _pendingFees: PromiseOrValue<BigNumberish>,
      _earningsProof: PromiseOrValue<BytesLike>[],
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setCurrentRoundTotalActiveStake(overrides?: CallOverrides): Promise<void>;

    transcoderWithHint(
      _rewardCut: PromiseOrValue<BigNumberish>,
      _feeShare: PromiseOrValue<BigNumberish>,
      _newPosPrev: PromiseOrValue<string>,
      _newPosNext: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    bondWithHint(
      _amount: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      _oldDelegateNewPosPrev: PromiseOrValue<string>,
      _oldDelegateNewPosNext: PromiseOrValue<string>,
      _currDelegateNewPosPrev: PromiseOrValue<string>,
      _currDelegateNewPosNext: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    unbondWithHint(
      _amount: PromiseOrValue<BigNumberish>,
      _newPosPrev: PromiseOrValue<string>,
      _newPosNext: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    rebondWithHint(
      _unbondingLockId: PromiseOrValue<BigNumberish>,
      _newPosPrev: PromiseOrValue<string>,
      _newPosNext: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    rebondFromUnbondedWithHint(
      _to: PromiseOrValue<string>,
      _unbondingLockId: PromiseOrValue<BigNumberish>,
      _newPosPrev: PromiseOrValue<string>,
      _newPosNext: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    rewardWithHint(
      _newPosPrev: PromiseOrValue<string>,
      _newPosNext: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    pendingStake(
      _delegator: PromiseOrValue<string>,
      _endRound: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingFees(
      _delegator: PromiseOrValue<string>,
      _endRound: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transcoderTotalStake(
      _transcoder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transcoderStatus(
      _transcoder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<number>;

    delegatorStatus(
      _delegator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<number>;

    getTranscoder(
      _transcoder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        lastRewardRound: BigNumber;
        rewardCut: BigNumber;
        feeShare: BigNumber;
        lastActiveStakeUpdateRound: BigNumber;
        activationRound: BigNumber;
        deactivationRound: BigNumber;
        activeCumulativeRewards: BigNumber;
        cumulativeRewards: BigNumber;
        cumulativeFees: BigNumber;
        lastFeeRound: BigNumber;
      }
    >;

    getTranscoderEarningsPoolForRound(
      _transcoder: PromiseOrValue<string>,
      _round: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber,
        BigNumber
      ] & {
        rewardPool: BigNumber;
        feePool: BigNumber;
        totalStake: BigNumber;
        claimableStake: BigNumber;
        transcoderRewardCut: BigNumber;
        transcoderFeeShare: BigNumber;
        transcoderRewardPool: BigNumber;
        transcoderFeePool: BigNumber;
        hasTranscoderRewardFeePool: boolean;
        cumulativeRewardFactor: BigNumber;
        cumulativeFeeFactor: BigNumber;
      }
    >;

    getDelegator(
      _delegator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        bondedAmount: BigNumber;
        fees: BigNumber;
        delegateAddress: string;
        delegatedAmount: BigNumber;
        startRound: BigNumber;
        lastClaimRound: BigNumber;
        nextUnbondingLockId: BigNumber;
      }
    >;

    getDelegatorUnbondingLock(
      _delegator: PromiseOrValue<string>,
      _unbondingLockId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; withdrawRound: BigNumber }
    >;

    getTranscoderPoolMaxSize(overrides?: CallOverrides): Promise<BigNumber>;

    getTranscoderPoolSize(overrides?: CallOverrides): Promise<BigNumber>;

    getFirstTranscoderInPool(overrides?: CallOverrides): Promise<string>;

    getNextTranscoderInPool(
      _transcoder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getTotalBonded(overrides?: CallOverrides): Promise<BigNumber>;

    isActiveTranscoder(
      _transcoder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isRegisteredTranscoder(
      _transcoder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isValidUnbondingLock(
      _delegator: PromiseOrValue<string>,
      _unbondingLockId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "TranscoderUpdate(address,uint256,uint256)"(
      transcoder?: PromiseOrValue<string> | null,
      rewardCut?: null,
      feeShare?: null
    ): TranscoderUpdateEventFilter;
    TranscoderUpdate(
      transcoder?: PromiseOrValue<string> | null,
      rewardCut?: null,
      feeShare?: null
    ): TranscoderUpdateEventFilter;

    "TranscoderActivated(address,uint256)"(
      transcoder?: PromiseOrValue<string> | null,
      activationRound?: null
    ): TranscoderActivatedEventFilter;
    TranscoderActivated(
      transcoder?: PromiseOrValue<string> | null,
      activationRound?: null
    ): TranscoderActivatedEventFilter;

    "TranscoderDeactivated(address,uint256)"(
      transcoder?: PromiseOrValue<string> | null,
      deactivationRound?: null
    ): TranscoderDeactivatedEventFilter;
    TranscoderDeactivated(
      transcoder?: PromiseOrValue<string> | null,
      deactivationRound?: null
    ): TranscoderDeactivatedEventFilter;

    "TranscoderSlashed(address,address,uint256,uint256)"(
      transcoder?: PromiseOrValue<string> | null,
      finder?: null,
      penalty?: null,
      finderReward?: null
    ): TranscoderSlashedEventFilter;
    TranscoderSlashed(
      transcoder?: PromiseOrValue<string> | null,
      finder?: null,
      penalty?: null,
      finderReward?: null
    ): TranscoderSlashedEventFilter;

    "Reward(address,uint256)"(
      transcoder?: PromiseOrValue<string> | null,
      amount?: null
    ): RewardEventFilter;
    Reward(
      transcoder?: PromiseOrValue<string> | null,
      amount?: null
    ): RewardEventFilter;

    "Bond(address,address,address,uint256,uint256)"(
      newDelegate?: PromiseOrValue<string> | null,
      oldDelegate?: PromiseOrValue<string> | null,
      delegator?: PromiseOrValue<string> | null,
      additionalAmount?: null,
      bondedAmount?: null
    ): BondEventFilter;
    Bond(
      newDelegate?: PromiseOrValue<string> | null,
      oldDelegate?: PromiseOrValue<string> | null,
      delegator?: PromiseOrValue<string> | null,
      additionalAmount?: null,
      bondedAmount?: null
    ): BondEventFilter;

    "Unbond(address,address,uint256,uint256,uint256)"(
      delegate?: PromiseOrValue<string> | null,
      delegator?: PromiseOrValue<string> | null,
      unbondingLockId?: null,
      amount?: null,
      withdrawRound?: null
    ): UnbondEventFilter;
    Unbond(
      delegate?: PromiseOrValue<string> | null,
      delegator?: PromiseOrValue<string> | null,
      unbondingLockId?: null,
      amount?: null,
      withdrawRound?: null
    ): UnbondEventFilter;

    "Rebond(address,address,uint256,uint256)"(
      delegate?: PromiseOrValue<string> | null,
      delegator?: PromiseOrValue<string> | null,
      unbondingLockId?: null,
      amount?: null
    ): RebondEventFilter;
    Rebond(
      delegate?: PromiseOrValue<string> | null,
      delegator?: PromiseOrValue<string> | null,
      unbondingLockId?: null,
      amount?: null
    ): RebondEventFilter;

    "WithdrawStake(address,uint256,uint256,uint256)"(
      delegator?: PromiseOrValue<string> | null,
      unbondingLockId?: null,
      amount?: null,
      withdrawRound?: null
    ): WithdrawStakeEventFilter;
    WithdrawStake(
      delegator?: PromiseOrValue<string> | null,
      unbondingLockId?: null,
      amount?: null,
      withdrawRound?: null
    ): WithdrawStakeEventFilter;

    "WithdrawFees(address)"(
      delegator?: PromiseOrValue<string> | null
    ): WithdrawFeesEventFilter;
    WithdrawFees(
      delegator?: PromiseOrValue<string> | null
    ): WithdrawFeesEventFilter;

    "EarningsClaimed(address,address,uint256,uint256,uint256,uint256)"(
      delegate?: PromiseOrValue<string> | null,
      delegator?: PromiseOrValue<string> | null,
      rewards?: null,
      fees?: null,
      startRound?: null,
      endRound?: null
    ): EarningsClaimedEventFilter;
    EarningsClaimed(
      delegate?: PromiseOrValue<string> | null,
      delegator?: PromiseOrValue<string> | null,
      rewards?: null,
      fees?: null,
      startRound?: null,
      endRound?: null
    ): EarningsClaimedEventFilter;

    "SetController(address)"(controller?: null): SetControllerEventFilter;
    SetController(controller?: null): SetControllerEventFilter;

    "ParameterUpdate(string)"(param?: null): ParameterUpdateEventFilter;
    ParameterUpdate(param?: null): ParameterUpdateEventFilter;
  };

  estimateGas: {
    activeTranscoderSetDEPRECATED(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxEarningsClaimsRounds(overrides?: CallOverrides): Promise<BigNumber>;

    numActiveTranscodersDEPRECATED(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentRoundTotalActiveStake(overrides?: CallOverrides): Promise<BigNumber>;

    nextRoundTotalActiveStake(overrides?: CallOverrides): Promise<BigNumber>;

    targetContractId(overrides?: CallOverrides): Promise<BigNumber>;

    unbondingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    setController(
      _controller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    controller(overrides?: CallOverrides): Promise<BigNumber>;

    setUnbondingPeriod(
      _unbondingPeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setNumActiveTranscoders(
      _numActiveTranscoders: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMaxEarningsClaimsRounds(
      _maxEarningsClaimsRounds: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executeLIP77(
      _bondedAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transcoder(
      _rewardCut: PromiseOrValue<BigNumberish>,
      _feeShare: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    bond(
      _amount: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unbond(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rebond(
      _unbondingLockId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rebondFromUnbonded(
      _to: PromiseOrValue<string>,
      _unbondingLockId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawStake(
      _unbondingLockId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawFees(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    reward(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateTranscoderWithFees(
      _transcoder: PromiseOrValue<string>,
      _fees: PromiseOrValue<BigNumberish>,
      _round: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    slashTranscoder(
      _transcoder: PromiseOrValue<string>,
      _finder: PromiseOrValue<string>,
      _slashAmount: PromiseOrValue<BigNumberish>,
      _finderFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimEarnings(
      _endRound: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimSnapshotEarnings(
      _pendingStake: PromiseOrValue<BigNumberish>,
      _pendingFees: PromiseOrValue<BigNumberish>,
      _earningsProof: PromiseOrValue<BytesLike>[],
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setCurrentRoundTotalActiveStake(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transcoderWithHint(
      _rewardCut: PromiseOrValue<BigNumberish>,
      _feeShare: PromiseOrValue<BigNumberish>,
      _newPosPrev: PromiseOrValue<string>,
      _newPosNext: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    bondWithHint(
      _amount: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      _oldDelegateNewPosPrev: PromiseOrValue<string>,
      _oldDelegateNewPosNext: PromiseOrValue<string>,
      _currDelegateNewPosPrev: PromiseOrValue<string>,
      _currDelegateNewPosNext: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unbondWithHint(
      _amount: PromiseOrValue<BigNumberish>,
      _newPosPrev: PromiseOrValue<string>,
      _newPosNext: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rebondWithHint(
      _unbondingLockId: PromiseOrValue<BigNumberish>,
      _newPosPrev: PromiseOrValue<string>,
      _newPosNext: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rebondFromUnbondedWithHint(
      _to: PromiseOrValue<string>,
      _unbondingLockId: PromiseOrValue<BigNumberish>,
      _newPosPrev: PromiseOrValue<string>,
      _newPosNext: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rewardWithHint(
      _newPosPrev: PromiseOrValue<string>,
      _newPosNext: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    pendingStake(
      _delegator: PromiseOrValue<string>,
      _endRound: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingFees(
      _delegator: PromiseOrValue<string>,
      _endRound: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transcoderTotalStake(
      _transcoder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transcoderStatus(
      _transcoder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    delegatorStatus(
      _delegator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTranscoder(
      _transcoder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTranscoderEarningsPoolForRound(
      _transcoder: PromiseOrValue<string>,
      _round: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDelegator(
      _delegator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDelegatorUnbondingLock(
      _delegator: PromiseOrValue<string>,
      _unbondingLockId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTranscoderPoolMaxSize(overrides?: CallOverrides): Promise<BigNumber>;

    getTranscoderPoolSize(overrides?: CallOverrides): Promise<BigNumber>;

    getFirstTranscoderInPool(overrides?: CallOverrides): Promise<BigNumber>;

    getNextTranscoderInPool(
      _transcoder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalBonded(overrides?: CallOverrides): Promise<BigNumber>;

    isActiveTranscoder(
      _transcoder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isRegisteredTranscoder(
      _transcoder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isValidUnbondingLock(
      _delegator: PromiseOrValue<string>,
      _unbondingLockId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    activeTranscoderSetDEPRECATED(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxEarningsClaimsRounds(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    numActiveTranscodersDEPRECATED(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentRoundTotalActiveStake(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nextRoundTotalActiveStake(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    targetContractId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unbondingPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setController(
      _controller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    controller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setUnbondingPeriod(
      _unbondingPeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setNumActiveTranscoders(
      _numActiveTranscoders: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMaxEarningsClaimsRounds(
      _maxEarningsClaimsRounds: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executeLIP77(
      _bondedAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transcoder(
      _rewardCut: PromiseOrValue<BigNumberish>,
      _feeShare: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    bond(
      _amount: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unbond(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rebond(
      _unbondingLockId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rebondFromUnbonded(
      _to: PromiseOrValue<string>,
      _unbondingLockId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawStake(
      _unbondingLockId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawFees(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    reward(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateTranscoderWithFees(
      _transcoder: PromiseOrValue<string>,
      _fees: PromiseOrValue<BigNumberish>,
      _round: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    slashTranscoder(
      _transcoder: PromiseOrValue<string>,
      _finder: PromiseOrValue<string>,
      _slashAmount: PromiseOrValue<BigNumberish>,
      _finderFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimEarnings(
      _endRound: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimSnapshotEarnings(
      _pendingStake: PromiseOrValue<BigNumberish>,
      _pendingFees: PromiseOrValue<BigNumberish>,
      _earningsProof: PromiseOrValue<BytesLike>[],
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setCurrentRoundTotalActiveStake(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transcoderWithHint(
      _rewardCut: PromiseOrValue<BigNumberish>,
      _feeShare: PromiseOrValue<BigNumberish>,
      _newPosPrev: PromiseOrValue<string>,
      _newPosNext: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    bondWithHint(
      _amount: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      _oldDelegateNewPosPrev: PromiseOrValue<string>,
      _oldDelegateNewPosNext: PromiseOrValue<string>,
      _currDelegateNewPosPrev: PromiseOrValue<string>,
      _currDelegateNewPosNext: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unbondWithHint(
      _amount: PromiseOrValue<BigNumberish>,
      _newPosPrev: PromiseOrValue<string>,
      _newPosNext: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rebondWithHint(
      _unbondingLockId: PromiseOrValue<BigNumberish>,
      _newPosPrev: PromiseOrValue<string>,
      _newPosNext: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rebondFromUnbondedWithHint(
      _to: PromiseOrValue<string>,
      _unbondingLockId: PromiseOrValue<BigNumberish>,
      _newPosPrev: PromiseOrValue<string>,
      _newPosNext: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rewardWithHint(
      _newPosPrev: PromiseOrValue<string>,
      _newPosNext: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    pendingStake(
      _delegator: PromiseOrValue<string>,
      _endRound: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pendingFees(
      _delegator: PromiseOrValue<string>,
      _endRound: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transcoderTotalStake(
      _transcoder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transcoderStatus(
      _transcoder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    delegatorStatus(
      _delegator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTranscoder(
      _transcoder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTranscoderEarningsPoolForRound(
      _transcoder: PromiseOrValue<string>,
      _round: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDelegator(
      _delegator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDelegatorUnbondingLock(
      _delegator: PromiseOrValue<string>,
      _unbondingLockId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTranscoderPoolMaxSize(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTranscoderPoolSize(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFirstTranscoderInPool(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNextTranscoderInPool(
      _transcoder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalBonded(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isActiveTranscoder(
      _transcoder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isRegisteredTranscoder(
      _transcoder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isValidUnbondingLock(
      _delegator: PromiseOrValue<string>,
      _unbondingLockId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
